//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5483
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace InsuranceClaims.AppData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InsuranceClaimsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InsuranceClaimsDataSet : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private ClaimInsuranceTypeDataTable tableClaimInsuranceType;
        
        private ClaimDetailDataTable tableClaimDetail;
        
        private ClaimPersonDataTable tableClaimPerson;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InsuranceClaimsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InsuranceClaimsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["ClaimInsuranceType"] != null)) {
                    base.Tables.Add(new ClaimInsuranceTypeDataTable(ds.Tables["ClaimInsuranceType"]));
                }
                if ((ds.Tables["ClaimDetail"] != null)) {
                    base.Tables.Add(new ClaimDetailDataTable(ds.Tables["ClaimDetail"]));
                }
                if ((ds.Tables["ClaimPerson"] != null)) {
                    base.Tables.Add(new ClaimPersonDataTable(ds.Tables["ClaimPerson"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClaimInsuranceTypeDataTable ClaimInsuranceType {
            get {
                return this.tableClaimInsuranceType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClaimDetailDataTable ClaimDetail {
            get {
                return this.tableClaimDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClaimPersonDataTable ClaimPerson {
            get {
                return this.tableClaimPerson;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InsuranceClaimsDataSet cln = ((InsuranceClaimsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["ClaimInsuranceType"] != null)) {
                    base.Tables.Add(new ClaimInsuranceTypeDataTable(ds.Tables["ClaimInsuranceType"]));
                }
                if ((ds.Tables["ClaimDetail"] != null)) {
                    base.Tables.Add(new ClaimDetailDataTable(ds.Tables["ClaimDetail"]));
                }
                if ((ds.Tables["ClaimPerson"] != null)) {
                    base.Tables.Add(new ClaimPersonDataTable(ds.Tables["ClaimPerson"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableClaimInsuranceType = ((ClaimInsuranceTypeDataTable)(base.Tables["ClaimInsuranceType"]));
            if ((initTable == true)) {
                if ((this.tableClaimInsuranceType != null)) {
                    this.tableClaimInsuranceType.InitVars();
                }
            }
            this.tableClaimDetail = ((ClaimDetailDataTable)(base.Tables["ClaimDetail"]));
            if ((initTable == true)) {
                if ((this.tableClaimDetail != null)) {
                    this.tableClaimDetail.InitVars();
                }
            }
            this.tableClaimPerson = ((ClaimPersonDataTable)(base.Tables["ClaimPerson"]));
            if ((initTable == true)) {
                if ((this.tableClaimPerson != null)) {
                    this.tableClaimPerson.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InsuranceClaimsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InsuranceClaimsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableClaimInsuranceType = new ClaimInsuranceTypeDataTable();
            base.Tables.Add(this.tableClaimInsuranceType);
            this.tableClaimDetail = new ClaimDetailDataTable();
            base.Tables.Add(this.tableClaimDetail);
            this.tableClaimPerson = new ClaimPersonDataTable();
            base.Tables.Add(this.tableClaimPerson);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClaimInsuranceType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClaimDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClaimPerson() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InsuranceClaimsDataSet ds = new InsuranceClaimsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void ClaimInsuranceTypeRowChangeEventHandler(object sender, ClaimInsuranceTypeRowChangeEvent e);
        
        public delegate void ClaimDetailRowChangeEventHandler(object sender, ClaimDetailRowChangeEvent e);
        
        public delegate void ClaimPersonRowChangeEventHandler(object sender, ClaimPersonRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnClaimId;
            
            private global::System.Data.DataColumn columnSequenceNo;
            
            private global::System.Data.DataColumn columnPersonId;
            
            private global::System.Data.DataColumn columnInsuranceTypeId;
            
            private global::System.Data.DataColumn columnInvoiceCount;
            
            private global::System.Data.DataColumn columnResponsibilityAmount;
            
            private global::System.Data.DataColumn columnClaimAmount;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnClaimDate;
            
            private global::System.Data.DataColumn columnClaimNo;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnInsuranceTypeName;
            
            private global::System.Data.DataColumn columnPersonName;
            
            private global::System.Data.DataColumn columnInsuranceId;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnHRID;
            
            private global::System.Data.DataColumn columnRelatedPerson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimIdColumn {
                get {
                    return this.columnClaimId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceNoColumn {
                get {
                    return this.columnSequenceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonIdColumn {
                get {
                    return this.columnPersonId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceTypeIdColumn {
                get {
                    return this.columnInsuranceTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceCountColumn {
                get {
                    return this.columnInvoiceCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsibilityAmountColumn {
                get {
                    return this.columnResponsibilityAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimAmountColumn {
                get {
                    return this.columnClaimAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimDateColumn {
                get {
                    return this.columnClaimDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimNoColumn {
                get {
                    return this.columnClaimNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceTypeNameColumn {
                get {
                    return this.columnInsuranceTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonNameColumn {
                get {
                    return this.columnPersonName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceIdColumn {
                get {
                    return this.columnInsuranceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HRIDColumn {
                get {
                    return this.columnHRID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelatedPersonColumn {
                get {
                    return this.columnRelatedPerson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(
                        int ClaimId, 
                        int SequenceNo, 
                        string PersonId, 
                        int InsuranceTypeId, 
                        int InvoiceCount, 
                        decimal ResponsibilityAmount, 
                        decimal ClaimAmount, 
                        string Remark, 
                        System.DateTime ClaimDate, 
                        string ClaimNo, 
                        string Code, 
                        string Address, 
                        string CustomerName, 
                        string InsuranceTypeName, 
                        string PersonName, 
                        int InsuranceId, 
                        int CustomerId, 
                        string HRID, 
                        string RelatedPerson) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClaimId,
                        SequenceNo,
                        PersonId,
                        InsuranceTypeId,
                        InvoiceCount,
                        ResponsibilityAmount,
                        ClaimAmount,
                        Remark,
                        ClaimDate,
                        ClaimNo,
                        Code,
                        Address,
                        CustomerName,
                        InsuranceTypeName,
                        PersonName,
                        InsuranceId,
                        CustomerId,
                        HRID,
                        RelatedPerson};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnClaimId = base.Columns["ClaimId"];
                this.columnSequenceNo = base.Columns["SequenceNo"];
                this.columnPersonId = base.Columns["PersonId"];
                this.columnInsuranceTypeId = base.Columns["InsuranceTypeId"];
                this.columnInvoiceCount = base.Columns["InvoiceCount"];
                this.columnResponsibilityAmount = base.Columns["ResponsibilityAmount"];
                this.columnClaimAmount = base.Columns["ClaimAmount"];
                this.columnRemark = base.Columns["Remark"];
                this.columnClaimDate = base.Columns["ClaimDate"];
                this.columnClaimNo = base.Columns["ClaimNo"];
                this.columnCode = base.Columns["Code"];
                this.columnAddress = base.Columns["Address"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnInsuranceTypeName = base.Columns["InsuranceTypeName"];
                this.columnPersonName = base.Columns["PersonName"];
                this.columnInsuranceId = base.Columns["InsuranceId"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnHRID = base.Columns["HRID"];
                this.columnRelatedPerson = base.Columns["RelatedPerson"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnClaimId = new global::System.Data.DataColumn("ClaimId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimId);
                this.columnSequenceNo = new global::System.Data.DataColumn("SequenceNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNo);
                this.columnPersonId = new global::System.Data.DataColumn("PersonId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonId);
                this.columnInsuranceTypeId = new global::System.Data.DataColumn("InsuranceTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceTypeId);
                this.columnInvoiceCount = new global::System.Data.DataColumn("InvoiceCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceCount);
                this.columnResponsibilityAmount = new global::System.Data.DataColumn("ResponsibilityAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibilityAmount);
                this.columnClaimAmount = new global::System.Data.DataColumn("ClaimAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimAmount);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnClaimDate = new global::System.Data.DataColumn("ClaimDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimDate);
                this.columnClaimNo = new global::System.Data.DataColumn("ClaimNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimNo);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnInsuranceTypeName = new global::System.Data.DataColumn("InsuranceTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceTypeName);
                this.columnPersonName = new global::System.Data.DataColumn("PersonName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonName);
                this.columnInsuranceId = new global::System.Data.DataColumn("InsuranceId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceId);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnHRID = new global::System.Data.DataColumn("HRID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHRID);
                this.columnRelatedPerson = new global::System.Data.DataColumn("RelatedPerson", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelatedPerson);
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnPersonId.MaxLength = 50;
                this.columnRemark.MaxLength = 255;
                this.columnClaimNo.MaxLength = 50;
                this.columnCode.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnCustomerName.MaxLength = 50;
                this.columnInsuranceTypeName.MaxLength = 50;
                this.columnPersonName.MaxLength = 50;
                this.columnHRID.MaxLength = 50;
                this.columnRelatedPerson.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InsuranceClaimsDataSet ds = new InsuranceClaimsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClaimInsuranceTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInsuranceTypeName;
            
            private global::System.Data.DataColumn columnClaimAmount;
            
            private global::System.Data.DataColumn columnResponsibilityAmount;
            
            private global::System.Data.DataColumn columnQZFAmount;
            
            private global::System.Data.DataColumn columnBFZFAmount;
            
            private global::System.Data.DataColumn columnQTKCAmount;
            
            private global::System.Data.DataColumn columnYBZFAmount;
            
            private global::System.Data.DataColumn columnDSFZFAmount;
            
            private global::System.Data.DataColumn columnMPEAmount;
            
            private global::System.Data.DataColumn columnPFRate;
            
            private global::System.Data.DataColumn columnSumAmount;
            
            private global::System.Data.DataColumn columnSumQZFAmount;
            
            private global::System.Data.DataColumn columnSumBFZFAmount;
            
            private global::System.Data.DataColumn columnSumQTKCAmount;
            
            private global::System.Data.DataColumn columnSumYBZFAmount;
            
            private global::System.Data.DataColumn columnSumDSFZFAmount;
            
            private global::System.Data.DataColumn columnSumMPEAmount;
            
            private global::System.Data.DataColumn columnSumClaimAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeDataTable() {
                this.TableName = "ClaimInsuranceType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimInsuranceTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClaimInsuranceTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceTypeNameColumn {
                get {
                    return this.columnInsuranceTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimAmountColumn {
                get {
                    return this.columnClaimAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsibilityAmountColumn {
                get {
                    return this.columnResponsibilityAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QZFAmountColumn {
                get {
                    return this.columnQZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BFZFAmountColumn {
                get {
                    return this.columnBFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTKCAmountColumn {
                get {
                    return this.columnQTKCAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YBZFAmountColumn {
                get {
                    return this.columnYBZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSFZFAmountColumn {
                get {
                    return this.columnDSFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPEAmountColumn {
                get {
                    return this.columnMPEAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFRateColumn {
                get {
                    return this.columnPFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumAmountColumn {
                get {
                    return this.columnSumAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumQZFAmountColumn {
                get {
                    return this.columnSumQZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumBFZFAmountColumn {
                get {
                    return this.columnSumBFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumQTKCAmountColumn {
                get {
                    return this.columnSumQTKCAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumYBZFAmountColumn {
                get {
                    return this.columnSumYBZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumDSFZFAmountColumn {
                get {
                    return this.columnSumDSFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumMPEAmountColumn {
                get {
                    return this.columnSumMPEAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumClaimAmountColumn {
                get {
                    return this.columnSumClaimAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeRow this[int index] {
                get {
                    return ((ClaimInsuranceTypeRow)(this.Rows[index]));
                }
            }
            
            public event ClaimInsuranceTypeRowChangeEventHandler ClaimInsuranceTypeRowChanging;
            
            public event ClaimInsuranceTypeRowChangeEventHandler ClaimInsuranceTypeRowChanged;
            
            public event ClaimInsuranceTypeRowChangeEventHandler ClaimInsuranceTypeRowDeleting;
            
            public event ClaimInsuranceTypeRowChangeEventHandler ClaimInsuranceTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClaimInsuranceTypeRow(ClaimInsuranceTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeRow AddClaimInsuranceTypeRow(
                        string InsuranceTypeName, 
                        decimal ClaimAmount, 
                        decimal ResponsibilityAmount, 
                        decimal QZFAmount, 
                        decimal BFZFAmount, 
                        decimal QTKCAmount, 
                        decimal YBZFAmount, 
                        decimal DSFZFAmount, 
                        decimal MPEAmount, 
                        decimal PFRate, 
                        decimal SumAmount, 
                        decimal SumQZFAmount, 
                        decimal SumBFZFAmount, 
                        decimal SumQTKCAmount, 
                        decimal SumYBZFAmount, 
                        decimal SumDSFZFAmount, 
                        decimal SumMPEAmount, 
                        decimal SumClaimAmount) {
                ClaimInsuranceTypeRow rowClaimInsuranceTypeRow = ((ClaimInsuranceTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InsuranceTypeName,
                        ClaimAmount,
                        ResponsibilityAmount,
                        QZFAmount,
                        BFZFAmount,
                        QTKCAmount,
                        YBZFAmount,
                        DSFZFAmount,
                        MPEAmount,
                        PFRate,
                        SumAmount,
                        SumQZFAmount,
                        SumBFZFAmount,
                        SumQTKCAmount,
                        SumYBZFAmount,
                        SumDSFZFAmount,
                        SumMPEAmount,
                        SumClaimAmount};
                rowClaimInsuranceTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClaimInsuranceTypeRow);
                return rowClaimInsuranceTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClaimInsuranceTypeDataTable cln = ((ClaimInsuranceTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClaimInsuranceTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInsuranceTypeName = base.Columns["InsuranceTypeName"];
                this.columnClaimAmount = base.Columns["ClaimAmount"];
                this.columnResponsibilityAmount = base.Columns["ResponsibilityAmount"];
                this.columnQZFAmount = base.Columns["QZFAmount"];
                this.columnBFZFAmount = base.Columns["BFZFAmount"];
                this.columnQTKCAmount = base.Columns["QTKCAmount"];
                this.columnYBZFAmount = base.Columns["YBZFAmount"];
                this.columnDSFZFAmount = base.Columns["DSFZFAmount"];
                this.columnMPEAmount = base.Columns["MPEAmount"];
                this.columnPFRate = base.Columns["PFRate"];
                this.columnSumAmount = base.Columns["SumAmount"];
                this.columnSumQZFAmount = base.Columns["SumQZFAmount"];
                this.columnSumBFZFAmount = base.Columns["SumBFZFAmount"];
                this.columnSumQTKCAmount = base.Columns["SumQTKCAmount"];
                this.columnSumYBZFAmount = base.Columns["SumYBZFAmount"];
                this.columnSumDSFZFAmount = base.Columns["SumDSFZFAmount"];
                this.columnSumMPEAmount = base.Columns["SumMPEAmount"];
                this.columnSumClaimAmount = base.Columns["SumClaimAmount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInsuranceTypeName = new global::System.Data.DataColumn("InsuranceTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceTypeName);
                this.columnClaimAmount = new global::System.Data.DataColumn("ClaimAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimAmount);
                this.columnResponsibilityAmount = new global::System.Data.DataColumn("ResponsibilityAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibilityAmount);
                this.columnQZFAmount = new global::System.Data.DataColumn("QZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQZFAmount);
                this.columnBFZFAmount = new global::System.Data.DataColumn("BFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBFZFAmount);
                this.columnQTKCAmount = new global::System.Data.DataColumn("QTKCAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTKCAmount);
                this.columnYBZFAmount = new global::System.Data.DataColumn("YBZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYBZFAmount);
                this.columnDSFZFAmount = new global::System.Data.DataColumn("DSFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSFZFAmount);
                this.columnMPEAmount = new global::System.Data.DataColumn("MPEAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPEAmount);
                this.columnPFRate = new global::System.Data.DataColumn("PFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFRate);
                this.columnSumAmount = new global::System.Data.DataColumn("SumAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumAmount);
                this.columnSumQZFAmount = new global::System.Data.DataColumn("SumQZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumQZFAmount);
                this.columnSumBFZFAmount = new global::System.Data.DataColumn("SumBFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumBFZFAmount);
                this.columnSumQTKCAmount = new global::System.Data.DataColumn("SumQTKCAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumQTKCAmount);
                this.columnSumYBZFAmount = new global::System.Data.DataColumn("SumYBZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumYBZFAmount);
                this.columnSumDSFZFAmount = new global::System.Data.DataColumn("SumDSFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumDSFZFAmount);
                this.columnSumMPEAmount = new global::System.Data.DataColumn("SumMPEAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumMPEAmount);
                this.columnSumClaimAmount = new global::System.Data.DataColumn("SumClaimAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumClaimAmount);
                this.columnInsuranceTypeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeRow NewClaimInsuranceTypeRow() {
                return ((ClaimInsuranceTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClaimInsuranceTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClaimInsuranceTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClaimInsuranceTypeRowChanged != null)) {
                    this.ClaimInsuranceTypeRowChanged(this, new ClaimInsuranceTypeRowChangeEvent(((ClaimInsuranceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClaimInsuranceTypeRowChanging != null)) {
                    this.ClaimInsuranceTypeRowChanging(this, new ClaimInsuranceTypeRowChangeEvent(((ClaimInsuranceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClaimInsuranceTypeRowDeleted != null)) {
                    this.ClaimInsuranceTypeRowDeleted(this, new ClaimInsuranceTypeRowChangeEvent(((ClaimInsuranceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClaimInsuranceTypeRowDeleting != null)) {
                    this.ClaimInsuranceTypeRowDeleting(this, new ClaimInsuranceTypeRowChangeEvent(((ClaimInsuranceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClaimInsuranceTypeRow(ClaimInsuranceTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InsuranceClaimsDataSet ds = new InsuranceClaimsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClaimInsuranceTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClaimDetailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnClaimId;
            
            private global::System.Data.DataColumn columnSequenceNo;
            
            private global::System.Data.DataColumn columnCertType;
            
            private global::System.Data.DataColumn columnPersonId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnInsuranceTypeCode;
            
            private global::System.Data.DataColumn columnClaimTypeId;
            
            private global::System.Data.DataColumn columnOccurDate;
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnAccount;
            
            private global::System.Data.DataColumn columnBankId;
            
            private global::System.Data.DataColumn columnInvoiceNo;
            
            private global::System.Data.DataColumn columnInvoiceCount;
            
            private global::System.Data.DataColumn columnHospitalId;
            
            private global::System.Data.DataColumn columnResponsibilityAmount;
            
            private global::System.Data.DataColumn columnQZFAmount;
            
            private global::System.Data.DataColumn columnBFZFAmount;
            
            private global::System.Data.DataColumn columnQTKCAmount;
            
            private global::System.Data.DataColumn columnYBZFAmount;
            
            private global::System.Data.DataColumn columnDSFZFAmount;
            
            private global::System.Data.DataColumn columnMPEAmount;
            
            private global::System.Data.DataColumn columnPFRate;
            
            private global::System.Data.DataColumn columnClaimAmount;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnClaimNo;
            
            private global::System.Data.DataColumn columnBankName;
            
            private global::System.Data.DataColumn columnHospitalName;
            
            private global::System.Data.DataColumn columnClaimDate;
            
            private global::System.Data.DataColumn columnInsuranceCode;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnInsuranceTypeName;
            
            private global::System.Data.DataColumn columnClaimTypeName;
            
            private global::System.Data.DataColumn columnCertTypeName;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnDepartment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailDataTable() {
                this.TableName = "ClaimDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClaimDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimIdColumn {
                get {
                    return this.columnClaimId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SequenceNoColumn {
                get {
                    return this.columnSequenceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertTypeColumn {
                get {
                    return this.columnCertType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonIdColumn {
                get {
                    return this.columnPersonId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceTypeCodeColumn {
                get {
                    return this.columnInsuranceTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimTypeIdColumn {
                get {
                    return this.columnClaimTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OccurDateColumn {
                get {
                    return this.columnOccurDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankIdColumn {
                get {
                    return this.columnBankId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNoColumn {
                get {
                    return this.columnInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceCountColumn {
                get {
                    return this.columnInvoiceCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HospitalIdColumn {
                get {
                    return this.columnHospitalId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsibilityAmountColumn {
                get {
                    return this.columnResponsibilityAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QZFAmountColumn {
                get {
                    return this.columnQZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BFZFAmountColumn {
                get {
                    return this.columnBFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTKCAmountColumn {
                get {
                    return this.columnQTKCAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YBZFAmountColumn {
                get {
                    return this.columnYBZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSFZFAmountColumn {
                get {
                    return this.columnDSFZFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPEAmountColumn {
                get {
                    return this.columnMPEAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFRateColumn {
                get {
                    return this.columnPFRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimAmountColumn {
                get {
                    return this.columnClaimAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimNoColumn {
                get {
                    return this.columnClaimNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HospitalNameColumn {
                get {
                    return this.columnHospitalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimDateColumn {
                get {
                    return this.columnClaimDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCodeColumn {
                get {
                    return this.columnInsuranceCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceTypeNameColumn {
                get {
                    return this.columnInsuranceTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimTypeNameColumn {
                get {
                    return this.columnClaimTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertTypeNameColumn {
                get {
                    return this.columnCertTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentColumn {
                get {
                    return this.columnDepartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailRow this[int index] {
                get {
                    return ((ClaimDetailRow)(this.Rows[index]));
                }
            }
            
            public event ClaimDetailRowChangeEventHandler ClaimDetailRowChanging;
            
            public event ClaimDetailRowChangeEventHandler ClaimDetailRowChanged;
            
            public event ClaimDetailRowChangeEventHandler ClaimDetailRowDeleting;
            
            public event ClaimDetailRowChangeEventHandler ClaimDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClaimDetailRow(ClaimDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailRow AddClaimDetailRow(
                        int ClaimId, 
                        int SequenceNo, 
                        string CertType, 
                        string PersonId, 
                        string Name, 
                        bool Gender, 
                        string InsuranceTypeCode, 
                        string ClaimTypeId, 
                        System.DateTime OccurDate, 
                        string AccountName, 
                        string Account, 
                        string BankId, 
                        string InvoiceNo, 
                        int InvoiceCount, 
                        string HospitalId, 
                        decimal ResponsibilityAmount, 
                        decimal QZFAmount, 
                        decimal BFZFAmount, 
                        decimal QTKCAmount, 
                        decimal YBZFAmount, 
                        decimal DSFZFAmount, 
                        decimal MPEAmount, 
                        decimal PFRate, 
                        decimal ClaimAmount, 
                        string Remark, 
                        string ClaimNo, 
                        string BankName, 
                        string HospitalName, 
                        System.DateTime ClaimDate, 
                        string InsuranceCode, 
                        string CustomerName, 
                        string InsuranceTypeName, 
                        string ClaimTypeName, 
                        string CertTypeName, 
                        string Code, 
                        string Company, 
                        string Department) {
                ClaimDetailRow rowClaimDetailRow = ((ClaimDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClaimId,
                        SequenceNo,
                        CertType,
                        PersonId,
                        Name,
                        Gender,
                        InsuranceTypeCode,
                        ClaimTypeId,
                        OccurDate,
                        AccountName,
                        Account,
                        BankId,
                        InvoiceNo,
                        InvoiceCount,
                        HospitalId,
                        ResponsibilityAmount,
                        QZFAmount,
                        BFZFAmount,
                        QTKCAmount,
                        YBZFAmount,
                        DSFZFAmount,
                        MPEAmount,
                        PFRate,
                        ClaimAmount,
                        Remark,
                        ClaimNo,
                        BankName,
                        HospitalName,
                        ClaimDate,
                        InsuranceCode,
                        null,
                        CustomerName,
                        InsuranceTypeName,
                        ClaimTypeName,
                        CertTypeName,
                        Code,
                        Company,
                        Department};
                rowClaimDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClaimDetailRow);
                return rowClaimDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClaimDetailDataTable cln = ((ClaimDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClaimDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnClaimId = base.Columns["ClaimId"];
                this.columnSequenceNo = base.Columns["SequenceNo"];
                this.columnCertType = base.Columns["CertType"];
                this.columnPersonId = base.Columns["PersonId"];
                this.columnName = base.Columns["Name"];
                this.columnGender = base.Columns["Gender"];
                this.columnInsuranceTypeCode = base.Columns["InsuranceTypeCode"];
                this.columnClaimTypeId = base.Columns["ClaimTypeId"];
                this.columnOccurDate = base.Columns["OccurDate"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnAccount = base.Columns["Account"];
                this.columnBankId = base.Columns["BankId"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnInvoiceCount = base.Columns["InvoiceCount"];
                this.columnHospitalId = base.Columns["HospitalId"];
                this.columnResponsibilityAmount = base.Columns["ResponsibilityAmount"];
                this.columnQZFAmount = base.Columns["QZFAmount"];
                this.columnBFZFAmount = base.Columns["BFZFAmount"];
                this.columnQTKCAmount = base.Columns["QTKCAmount"];
                this.columnYBZFAmount = base.Columns["YBZFAmount"];
                this.columnDSFZFAmount = base.Columns["DSFZFAmount"];
                this.columnMPEAmount = base.Columns["MPEAmount"];
                this.columnPFRate = base.Columns["PFRate"];
                this.columnClaimAmount = base.Columns["ClaimAmount"];
                this.columnRemark = base.Columns["Remark"];
                this.columnClaimNo = base.Columns["ClaimNo"];
                this.columnBankName = base.Columns["BankName"];
                this.columnHospitalName = base.Columns["HospitalName"];
                this.columnClaimDate = base.Columns["ClaimDate"];
                this.columnInsuranceCode = base.Columns["InsuranceCode"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnInsuranceTypeName = base.Columns["InsuranceTypeName"];
                this.columnClaimTypeName = base.Columns["ClaimTypeName"];
                this.columnCertTypeName = base.Columns["CertTypeName"];
                this.columnCode = base.Columns["Code"];
                this.columnCompany = base.Columns["Company"];
                this.columnDepartment = base.Columns["Department"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnClaimId = new global::System.Data.DataColumn("ClaimId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimId);
                this.columnSequenceNo = new global::System.Data.DataColumn("SequenceNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSequenceNo);
                this.columnCertType = new global::System.Data.DataColumn("CertType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertType);
                this.columnPersonId = new global::System.Data.DataColumn("PersonId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnInsuranceTypeCode = new global::System.Data.DataColumn("InsuranceTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceTypeCode);
                this.columnClaimTypeId = new global::System.Data.DataColumn("ClaimTypeId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimTypeId);
                this.columnOccurDate = new global::System.Data.DataColumn("OccurDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOccurDate);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnAccount = new global::System.Data.DataColumn("Account", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount);
                this.columnBankId = new global::System.Data.DataColumn("BankId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankId);
                this.columnInvoiceNo = new global::System.Data.DataColumn("InvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnInvoiceCount = new global::System.Data.DataColumn("InvoiceCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceCount);
                this.columnHospitalId = new global::System.Data.DataColumn("HospitalId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHospitalId);
                this.columnResponsibilityAmount = new global::System.Data.DataColumn("ResponsibilityAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibilityAmount);
                this.columnQZFAmount = new global::System.Data.DataColumn("QZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQZFAmount);
                this.columnBFZFAmount = new global::System.Data.DataColumn("BFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBFZFAmount);
                this.columnQTKCAmount = new global::System.Data.DataColumn("QTKCAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTKCAmount);
                this.columnYBZFAmount = new global::System.Data.DataColumn("YBZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYBZFAmount);
                this.columnDSFZFAmount = new global::System.Data.DataColumn("DSFZFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSFZFAmount);
                this.columnMPEAmount = new global::System.Data.DataColumn("MPEAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPEAmount);
                this.columnPFRate = new global::System.Data.DataColumn("PFRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFRate);
                this.columnClaimAmount = new global::System.Data.DataColumn("ClaimAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimAmount);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnClaimNo = new global::System.Data.DataColumn("ClaimNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimNo);
                this.columnBankName = new global::System.Data.DataColumn("BankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnHospitalName = new global::System.Data.DataColumn("HospitalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHospitalName);
                this.columnClaimDate = new global::System.Data.DataColumn("ClaimDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimDate);
                this.columnInsuranceCode = new global::System.Data.DataColumn("InsuranceCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCode);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnInsuranceTypeName = new global::System.Data.DataColumn("InsuranceTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceTypeName);
                this.columnClaimTypeName = new global::System.Data.DataColumn("ClaimTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimTypeName);
                this.columnCertTypeName = new global::System.Data.DataColumn("CertTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertTypeName);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnDepartment = new global::System.Data.DataColumn("Department", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartment);
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnCertType.MaxLength = 10;
                this.columnPersonId.MaxLength = 50;
                this.columnName.MaxLength = 50;
                this.columnInsuranceTypeCode.MaxLength = 10;
                this.columnClaimTypeId.MaxLength = 10;
                this.columnAccountName.MaxLength = 50;
                this.columnAccount.MaxLength = 50;
                this.columnBankId.MaxLength = 50;
                this.columnInvoiceNo.MaxLength = 50;
                this.columnHospitalId.MaxLength = 50;
                this.columnRemark.MaxLength = 255;
                this.columnClaimNo.MaxLength = 20;
                this.columnBankName.MaxLength = 50;
                this.columnHospitalName.MaxLength = 50;
                this.columnInsuranceCode.MaxLength = 50;
                this.columnCustomerId.AutoIncrement = true;
                this.columnCustomerId.AutoIncrementSeed = -1;
                this.columnCustomerId.AutoIncrementStep = -1;
                this.columnCustomerName.MaxLength = 50;
                this.columnInsuranceTypeName.MaxLength = 50;
                this.columnClaimTypeName.MaxLength = 50;
                this.columnCertTypeName.MaxLength = 50;
                this.columnCode.MaxLength = 50;
                this.columnCompany.MaxLength = 50;
                this.columnDepartment.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailRow NewClaimDetailRow() {
                return ((ClaimDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClaimDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClaimDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClaimDetailRowChanged != null)) {
                    this.ClaimDetailRowChanged(this, new ClaimDetailRowChangeEvent(((ClaimDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClaimDetailRowChanging != null)) {
                    this.ClaimDetailRowChanging(this, new ClaimDetailRowChangeEvent(((ClaimDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClaimDetailRowDeleted != null)) {
                    this.ClaimDetailRowDeleted(this, new ClaimDetailRowChangeEvent(((ClaimDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClaimDetailRowDeleting != null)) {
                    this.ClaimDetailRowDeleting(this, new ClaimDetailRowChangeEvent(((ClaimDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClaimDetailRow(ClaimDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InsuranceClaimsDataSet ds = new InsuranceClaimsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClaimDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClaimPersonDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPersonId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCompany;
            
            private global::System.Data.DataColumn columnDepartment;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnClaimId;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnInsuranceCode;
            
            private global::System.Data.DataColumn columnBankName;
            
            private global::System.Data.DataColumn columnClaimDate;
            
            private global::System.Data.DataColumn columnClaimNo;
            
            private global::System.Data.DataColumn columnCertTypeName;
            
            private global::System.Data.DataColumn columnAccountName;
            
            private global::System.Data.DataColumn columnAccount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonDataTable() {
                this.TableName = "ClaimPerson";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimPersonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClaimPersonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonIdColumn {
                get {
                    return this.columnPersonId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentColumn {
                get {
                    return this.columnDepartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimIdColumn {
                get {
                    return this.columnClaimId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCodeColumn {
                get {
                    return this.columnInsuranceCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimDateColumn {
                get {
                    return this.columnClaimDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimNoColumn {
                get {
                    return this.columnClaimNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CertTypeNameColumn {
                get {
                    return this.columnCertTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonRow this[int index] {
                get {
                    return ((ClaimPersonRow)(this.Rows[index]));
                }
            }
            
            public event ClaimPersonRowChangeEventHandler ClaimPersonRowChanging;
            
            public event ClaimPersonRowChangeEventHandler ClaimPersonRowChanged;
            
            public event ClaimPersonRowChangeEventHandler ClaimPersonRowDeleting;
            
            public event ClaimPersonRowChangeEventHandler ClaimPersonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClaimPersonRow(ClaimPersonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonRow AddClaimPersonRow(string PersonId, string Name, string Company, string Department, string Code, int ClaimId, string CustomerName, string InsuranceCode, string BankName, System.DateTime ClaimDate, string ClaimNo, string CertTypeName, string AccountName, string Account) {
                ClaimPersonRow rowClaimPersonRow = ((ClaimPersonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PersonId,
                        Name,
                        Company,
                        Department,
                        Code,
                        ClaimId,
                        CustomerName,
                        InsuranceCode,
                        BankName,
                        ClaimDate,
                        ClaimNo,
                        CertTypeName,
                        AccountName,
                        Account};
                rowClaimPersonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClaimPersonRow);
                return rowClaimPersonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClaimPersonDataTable cln = ((ClaimPersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClaimPersonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPersonId = base.Columns["PersonId"];
                this.columnName = base.Columns["Name"];
                this.columnCompany = base.Columns["Company"];
                this.columnDepartment = base.Columns["Department"];
                this.columnCode = base.Columns["Code"];
                this.columnClaimId = base.Columns["ClaimId"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnInsuranceCode = base.Columns["InsuranceCode"];
                this.columnBankName = base.Columns["BankName"];
                this.columnClaimDate = base.Columns["ClaimDate"];
                this.columnClaimNo = base.Columns["ClaimNo"];
                this.columnCertTypeName = base.Columns["CertTypeName"];
                this.columnAccountName = base.Columns["AccountName"];
                this.columnAccount = base.Columns["Account"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPersonId = new global::System.Data.DataColumn("PersonId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.columnDepartment = new global::System.Data.DataColumn("Department", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartment);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnClaimId = new global::System.Data.DataColumn("ClaimId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimId);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnInsuranceCode = new global::System.Data.DataColumn("InsuranceCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCode);
                this.columnBankName = new global::System.Data.DataColumn("BankName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnClaimDate = new global::System.Data.DataColumn("ClaimDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimDate);
                this.columnClaimNo = new global::System.Data.DataColumn("ClaimNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimNo);
                this.columnCertTypeName = new global::System.Data.DataColumn("CertTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCertTypeName);
                this.columnAccountName = new global::System.Data.DataColumn("AccountName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountName);
                this.columnAccount = new global::System.Data.DataColumn("Account", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount);
                this.columnPersonId.MaxLength = 50;
                this.columnName.MaxLength = 50;
                this.columnCompany.MaxLength = 50;
                this.columnDepartment.MaxLength = 50;
                this.columnCode.MaxLength = 50;
                this.columnCustomerName.MaxLength = 50;
                this.columnInsuranceCode.MaxLength = 50;
                this.columnBankName.MaxLength = 50;
                this.columnClaimNo.MaxLength = 20;
                this.columnCertTypeName.MaxLength = 50;
                this.columnAccountName.MaxLength = 50;
                this.columnAccount.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonRow NewClaimPersonRow() {
                return ((ClaimPersonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClaimPersonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClaimPersonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClaimPersonRowChanged != null)) {
                    this.ClaimPersonRowChanged(this, new ClaimPersonRowChangeEvent(((ClaimPersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClaimPersonRowChanging != null)) {
                    this.ClaimPersonRowChanging(this, new ClaimPersonRowChangeEvent(((ClaimPersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClaimPersonRowDeleted != null)) {
                    this.ClaimPersonRowDeleted(this, new ClaimPersonRowChangeEvent(((ClaimPersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClaimPersonRowDeleting != null)) {
                    this.ClaimPersonRowDeleting(this, new ClaimPersonRowChangeEvent(((ClaimPersonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClaimPersonRow(ClaimPersonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InsuranceClaimsDataSet ds = new InsuranceClaimsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClaimPersonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“Id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClaimId {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.ClaimIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“ClaimId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ClaimIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceNo {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.SequenceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“SequenceNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.SequenceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonId {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PersonIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PersonId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PersonIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceTypeId {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.InsuranceTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“InsuranceTypeId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.InsuranceTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceCount {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.InvoiceCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“InvoiceCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.InvoiceCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResponsibilityAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.ResponsibilityAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“ResponsibilityAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ResponsibilityAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ClaimAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.ClaimAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“ClaimAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ClaimAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClaimDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataTable1.ClaimDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“ClaimDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ClaimDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimNo {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ClaimNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“ClaimNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ClaimNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“Address”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceTypeName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.InsuranceTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“InsuranceTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.InsuranceTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PersonNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PersonName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PersonNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceId {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.InsuranceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“InsuranceId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.InsuranceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerId {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CustomerId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HRID {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.HRIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“HRID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.HRIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RelatedPerson {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.RelatedPersonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“RelatedPerson”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.RelatedPersonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableDataTable1.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableDataTable1.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimIdNull() {
                return this.IsNull(this.tableDataTable1.ClaimIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimIdNull() {
                this[this.tableDataTable1.ClaimIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceNoNull() {
                return this.IsNull(this.tableDataTable1.SequenceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceNoNull() {
                this[this.tableDataTable1.SequenceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonIdNull() {
                return this.IsNull(this.tableDataTable1.PersonIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonIdNull() {
                this[this.tableDataTable1.PersonIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceTypeIdNull() {
                return this.IsNull(this.tableDataTable1.InsuranceTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceTypeIdNull() {
                this[this.tableDataTable1.InsuranceTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceCountNull() {
                return this.IsNull(this.tableDataTable1.InvoiceCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceCountNull() {
                this[this.tableDataTable1.InvoiceCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibilityAmountNull() {
                return this.IsNull(this.tableDataTable1.ResponsibilityAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibilityAmountNull() {
                this[this.tableDataTable1.ResponsibilityAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimAmountNull() {
                return this.IsNull(this.tableDataTable1.ClaimAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimAmountNull() {
                this[this.tableDataTable1.ClaimAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableDataTable1.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableDataTable1.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimDateNull() {
                return this.IsNull(this.tableDataTable1.ClaimDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimDateNull() {
                this[this.tableDataTable1.ClaimDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimNoNull() {
                return this.IsNull(this.tableDataTable1.ClaimNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimNoNull() {
                this[this.tableDataTable1.ClaimNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableDataTable1.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableDataTable1.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableDataTable1.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableDataTable1.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableDataTable1.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableDataTable1.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceTypeNameNull() {
                return this.IsNull(this.tableDataTable1.InsuranceTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceTypeNameNull() {
                this[this.tableDataTable1.InsuranceTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonNameNull() {
                return this.IsNull(this.tableDataTable1.PersonNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonNameNull() {
                this[this.tableDataTable1.PersonNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceIdNull() {
                return this.IsNull(this.tableDataTable1.InsuranceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceIdNull() {
                this[this.tableDataTable1.InsuranceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableDataTable1.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableDataTable1.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHRIDNull() {
                return this.IsNull(this.tableDataTable1.HRIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHRIDNull() {
                this[this.tableDataTable1.HRIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelatedPersonNull() {
                return this.IsNull(this.tableDataTable1.RelatedPersonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelatedPersonNull() {
                this[this.tableDataTable1.RelatedPersonColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClaimInsuranceTypeRow : global::System.Data.DataRow {
            
            private ClaimInsuranceTypeDataTable tableClaimInsuranceType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimInsuranceTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClaimInsuranceType = ((ClaimInsuranceTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceTypeName {
                get {
                    try {
                        return ((string)(this[this.tableClaimInsuranceType.InsuranceTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“InsuranceTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.InsuranceTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ClaimAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.ClaimAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“ClaimAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.ClaimAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResponsibilityAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.ResponsibilityAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“ResponsibilityAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.ResponsibilityAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.QZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“QZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.QZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.BFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“BFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.BFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTKCAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.QTKCAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“QTKCAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.QTKCAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YBZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.YBZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“YBZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.YBZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DSFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.DSFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“DSFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.DSFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MPEAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.MPEAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“MPEAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.MPEAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PFRate {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.PFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“PFRate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.PFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumQZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumQZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumQZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumQZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumBFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumBFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumBFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumBFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumQTKCAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumQTKCAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumQTKCAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumQTKCAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumYBZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumYBZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumYBZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumYBZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumDSFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumDSFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumDSFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumDSFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumMPEAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumMPEAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumMPEAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumMPEAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumClaimAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimInsuranceType.SumClaimAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimInsuranceType”中列“SumClaimAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimInsuranceType.SumClaimAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceTypeNameNull() {
                return this.IsNull(this.tableClaimInsuranceType.InsuranceTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceTypeNameNull() {
                this[this.tableClaimInsuranceType.InsuranceTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.ClaimAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimAmountNull() {
                this[this.tableClaimInsuranceType.ClaimAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibilityAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.ResponsibilityAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibilityAmountNull() {
                this[this.tableClaimInsuranceType.ResponsibilityAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.QZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQZFAmountNull() {
                this[this.tableClaimInsuranceType.QZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBFZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.BFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBFZFAmountNull() {
                this[this.tableClaimInsuranceType.BFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTKCAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.QTKCAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTKCAmountNull() {
                this[this.tableClaimInsuranceType.QTKCAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYBZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.YBZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYBZFAmountNull() {
                this[this.tableClaimInsuranceType.YBZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSFZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.DSFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSFZFAmountNull() {
                this[this.tableClaimInsuranceType.DSFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPEAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.MPEAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPEAmountNull() {
                this[this.tableClaimInsuranceType.MPEAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFRateNull() {
                return this.IsNull(this.tableClaimInsuranceType.PFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFRateNull() {
                this[this.tableClaimInsuranceType.PFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumAmountNull() {
                this[this.tableClaimInsuranceType.SumAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumQZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumQZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumQZFAmountNull() {
                this[this.tableClaimInsuranceType.SumQZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumBFZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumBFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumBFZFAmountNull() {
                this[this.tableClaimInsuranceType.SumBFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumQTKCAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumQTKCAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumQTKCAmountNull() {
                this[this.tableClaimInsuranceType.SumQTKCAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumYBZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumYBZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumYBZFAmountNull() {
                this[this.tableClaimInsuranceType.SumYBZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumDSFZFAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumDSFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumDSFZFAmountNull() {
                this[this.tableClaimInsuranceType.SumDSFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumMPEAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumMPEAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumMPEAmountNull() {
                this[this.tableClaimInsuranceType.SumMPEAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumClaimAmountNull() {
                return this.IsNull(this.tableClaimInsuranceType.SumClaimAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumClaimAmountNull() {
                this[this.tableClaimInsuranceType.SumClaimAmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClaimDetailRow : global::System.Data.DataRow {
            
            private ClaimDetailDataTable tableClaimDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClaimDetail = ((ClaimDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    try {
                        return ((int)(this[this.tableClaimDetail.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClaimId {
                get {
                    try {
                        return ((int)(this[this.tableClaimDetail.ClaimIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SequenceNo {
                get {
                    try {
                        return ((int)(this[this.tableClaimDetail.SequenceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“SequenceNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.SequenceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CertType {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.CertTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“CertType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CertTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonId {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.PersonIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“PersonId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.PersonIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Gender {
                get {
                    try {
                        return ((bool)(this[this.tableClaimDetail.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Gender”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.InsuranceTypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“InsuranceTypeCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.InsuranceTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimTypeId {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.ClaimTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimTypeId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OccurDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClaimDetail.OccurDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“OccurDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.OccurDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“AccountName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.AccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Account”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.AccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankId {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.BankIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“BankId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.BankIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.InvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“InvoiceNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.InvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceCount {
                get {
                    try {
                        return ((int)(this[this.tableClaimDetail.InvoiceCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“InvoiceCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.InvoiceCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HospitalId {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.HospitalIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“HospitalId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.HospitalIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ResponsibilityAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.ResponsibilityAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ResponsibilityAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ResponsibilityAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.QZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“QZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.QZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.BFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“BFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.BFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTKCAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.QTKCAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“QTKCAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.QTKCAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal YBZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.YBZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“YBZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.YBZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DSFZFAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.DSFZFAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“DSFZFAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.DSFZFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MPEAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.MPEAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“MPEAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.MPEAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PFRate {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.PFRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“PFRate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.PFRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ClaimAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableClaimDetail.ClaimAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimNo {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.ClaimNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.BankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“BankName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.BankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HospitalName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.HospitalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“HospitalName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.HospitalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClaimDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClaimDetail.ClaimDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceCode {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.InsuranceCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“InsuranceCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.InsuranceCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerId {
                get {
                    try {
                        return ((int)(this[this.tableClaimDetail.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“CustomerId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceTypeName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.InsuranceTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“InsuranceTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.InsuranceTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimTypeName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.ClaimTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“ClaimTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.ClaimTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CertTypeName {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.CertTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“CertTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CertTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Company”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Department {
                get {
                    try {
                        return ((string)(this[this.tableClaimDetail.DepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimDetail”中列“Department”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimDetail.DepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tableClaimDetail.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tableClaimDetail.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimIdNull() {
                return this.IsNull(this.tableClaimDetail.ClaimIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimIdNull() {
                this[this.tableClaimDetail.ClaimIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSequenceNoNull() {
                return this.IsNull(this.tableClaimDetail.SequenceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSequenceNoNull() {
                this[this.tableClaimDetail.SequenceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertTypeNull() {
                return this.IsNull(this.tableClaimDetail.CertTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertTypeNull() {
                this[this.tableClaimDetail.CertTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonIdNull() {
                return this.IsNull(this.tableClaimDetail.PersonIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonIdNull() {
                this[this.tableClaimDetail.PersonIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableClaimDetail.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableClaimDetail.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableClaimDetail.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableClaimDetail.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceTypeCodeNull() {
                return this.IsNull(this.tableClaimDetail.InsuranceTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceTypeCodeNull() {
                this[this.tableClaimDetail.InsuranceTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimTypeIdNull() {
                return this.IsNull(this.tableClaimDetail.ClaimTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimTypeIdNull() {
                this[this.tableClaimDetail.ClaimTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOccurDateNull() {
                return this.IsNull(this.tableClaimDetail.OccurDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOccurDateNull() {
                this[this.tableClaimDetail.OccurDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableClaimDetail.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableClaimDetail.AccountNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNull() {
                return this.IsNull(this.tableClaimDetail.AccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNull() {
                this[this.tableClaimDetail.AccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankIdNull() {
                return this.IsNull(this.tableClaimDetail.BankIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankIdNull() {
                this[this.tableClaimDetail.BankIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNoNull() {
                return this.IsNull(this.tableClaimDetail.InvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNoNull() {
                this[this.tableClaimDetail.InvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceCountNull() {
                return this.IsNull(this.tableClaimDetail.InvoiceCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceCountNull() {
                this[this.tableClaimDetail.InvoiceCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHospitalIdNull() {
                return this.IsNull(this.tableClaimDetail.HospitalIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHospitalIdNull() {
                this[this.tableClaimDetail.HospitalIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibilityAmountNull() {
                return this.IsNull(this.tableClaimDetail.ResponsibilityAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibilityAmountNull() {
                this[this.tableClaimDetail.ResponsibilityAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQZFAmountNull() {
                return this.IsNull(this.tableClaimDetail.QZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQZFAmountNull() {
                this[this.tableClaimDetail.QZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBFZFAmountNull() {
                return this.IsNull(this.tableClaimDetail.BFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBFZFAmountNull() {
                this[this.tableClaimDetail.BFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTKCAmountNull() {
                return this.IsNull(this.tableClaimDetail.QTKCAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTKCAmountNull() {
                this[this.tableClaimDetail.QTKCAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYBZFAmountNull() {
                return this.IsNull(this.tableClaimDetail.YBZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYBZFAmountNull() {
                this[this.tableClaimDetail.YBZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSFZFAmountNull() {
                return this.IsNull(this.tableClaimDetail.DSFZFAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSFZFAmountNull() {
                this[this.tableClaimDetail.DSFZFAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPEAmountNull() {
                return this.IsNull(this.tableClaimDetail.MPEAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPEAmountNull() {
                this[this.tableClaimDetail.MPEAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFRateNull() {
                return this.IsNull(this.tableClaimDetail.PFRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFRateNull() {
                this[this.tableClaimDetail.PFRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimAmountNull() {
                return this.IsNull(this.tableClaimDetail.ClaimAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimAmountNull() {
                this[this.tableClaimDetail.ClaimAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableClaimDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableClaimDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimNoNull() {
                return this.IsNull(this.tableClaimDetail.ClaimNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimNoNull() {
                this[this.tableClaimDetail.ClaimNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableClaimDetail.BankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableClaimDetail.BankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHospitalNameNull() {
                return this.IsNull(this.tableClaimDetail.HospitalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHospitalNameNull() {
                this[this.tableClaimDetail.HospitalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimDateNull() {
                return this.IsNull(this.tableClaimDetail.ClaimDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimDateNull() {
                this[this.tableClaimDetail.ClaimDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceCodeNull() {
                return this.IsNull(this.tableClaimDetail.InsuranceCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceCodeNull() {
                this[this.tableClaimDetail.InsuranceCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tableClaimDetail.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tableClaimDetail.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableClaimDetail.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableClaimDetail.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceTypeNameNull() {
                return this.IsNull(this.tableClaimDetail.InsuranceTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceTypeNameNull() {
                this[this.tableClaimDetail.InsuranceTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimTypeNameNull() {
                return this.IsNull(this.tableClaimDetail.ClaimTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimTypeNameNull() {
                this[this.tableClaimDetail.ClaimTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertTypeNameNull() {
                return this.IsNull(this.tableClaimDetail.CertTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertTypeNameNull() {
                this[this.tableClaimDetail.CertTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableClaimDetail.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableClaimDetail.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableClaimDetail.CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableClaimDetail.CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNull() {
                return this.IsNull(this.tableClaimDetail.DepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNull() {
                this[this.tableClaimDetail.DepartmentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClaimPersonRow : global::System.Data.DataRow {
            
            private ClaimPersonDataTable tableClaimPerson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClaimPersonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClaimPerson = ((ClaimPersonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonId {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.PersonIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“PersonId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.PersonIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“Name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“Company”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Department {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.DepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“Department”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.DepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClaimId {
                get {
                    try {
                        return ((int)(this[this.tableClaimPerson.ClaimIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“ClaimId”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.ClaimIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceCode {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.InsuranceCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“InsuranceCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.InsuranceCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.BankNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“BankName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.BankNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClaimDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClaimPerson.ClaimDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“ClaimDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.ClaimDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimNo {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.ClaimNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“ClaimNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.ClaimNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CertTypeName {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.CertTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“CertTypeName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.CertTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.AccountNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“AccountName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.AccountNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableClaimPerson.AccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ClaimPerson”中列“Account”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableClaimPerson.AccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonIdNull() {
                return this.IsNull(this.tableClaimPerson.PersonIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonIdNull() {
                this[this.tableClaimPerson.PersonIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableClaimPerson.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableClaimPerson.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableClaimPerson.CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableClaimPerson.CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentNull() {
                return this.IsNull(this.tableClaimPerson.DepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentNull() {
                this[this.tableClaimPerson.DepartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableClaimPerson.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableClaimPerson.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimIdNull() {
                return this.IsNull(this.tableClaimPerson.ClaimIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimIdNull() {
                this[this.tableClaimPerson.ClaimIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableClaimPerson.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableClaimPerson.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceCodeNull() {
                return this.IsNull(this.tableClaimPerson.InsuranceCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceCodeNull() {
                this[this.tableClaimPerson.InsuranceCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableClaimPerson.BankNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableClaimPerson.BankNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimDateNull() {
                return this.IsNull(this.tableClaimPerson.ClaimDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimDateNull() {
                this[this.tableClaimPerson.ClaimDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimNoNull() {
                return this.IsNull(this.tableClaimPerson.ClaimNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimNoNull() {
                this[this.tableClaimPerson.ClaimNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCertTypeNameNull() {
                return this.IsNull(this.tableClaimPerson.CertTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCertTypeNameNull() {
                this[this.tableClaimPerson.CertTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableClaimPerson.AccountNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNameNull() {
                this[this.tableClaimPerson.AccountNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNull() {
                return this.IsNull(this.tableClaimPerson.AccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNull() {
                this[this.tableClaimPerson.AccountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClaimInsuranceTypeRowChangeEvent : global::System.EventArgs {
            
            private ClaimInsuranceTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeRowChangeEvent(ClaimInsuranceTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimInsuranceTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClaimDetailRowChangeEvent : global::System.EventArgs {
            
            private ClaimDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailRowChangeEvent(ClaimDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClaimPersonRowChangeEvent : global::System.EventArgs {
            
            private ClaimPersonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonRowChangeEvent(ClaimPersonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClaimPersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace InsuranceClaims.AppData.InsuranceClaimsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("ClaimId", "ClaimId");
            tableMapping.ColumnMappings.Add("SequenceNo", "SequenceNo");
            tableMapping.ColumnMappings.Add("PersonId", "PersonId");
            tableMapping.ColumnMappings.Add("InsuranceTypeId", "InsuranceTypeId");
            tableMapping.ColumnMappings.Add("InvoiceCount", "InvoiceCount");
            tableMapping.ColumnMappings.Add("ResponsibilityAmount", "ResponsibilityAmount");
            tableMapping.ColumnMappings.Add("ClaimAmount", "ClaimAmount");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("ClaimDate", "ClaimDate");
            tableMapping.ColumnMappings.Add("ClaimNo", "ClaimNo");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("InsuranceTypeName", "InsuranceTypeName");
            tableMapping.ColumnMappings.Add("PersonName", "PersonName");
            tableMapping.ColumnMappings.Add("InsuranceId", "InsuranceId");
            tableMapping.ColumnMappings.Add("CustomerId", "CustomerId");
            tableMapping.ColumnMappings.Add("HRID", "HRID");
            tableMapping.ColumnMappings.Add("RelatedPerson", "RelatedPerson");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::InsuranceClaims.Properties.Settings.Default.InsuranceClaimsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"Select A.*,B.Name As CustomerName,B.Address
From 
(Select A.*,B.Code,B.CustomerId
From
(Select A.*,B.ClaimNo,B.ClaimDate,B.InsuranceId
From
(Select A.ClaimId,A.HRID,A.PersonId,A.PersonName,A.RelatedPerson,A.InsuranceTypeId,A.InsuranceTypeName,
        B.Id,A.SequenceNo,B.InvoiceCount,B.ResponsibilityAmount,B.ClaimAmount,B.Remark
From
	(Select A.*,B.Id As InsuranceTypeId,B.Name AS InsuranceTypeName
	From  (Select Distinct ClaimId,PersonId,HRID,Name As PersonName,RelatedPerson,SequenceNo From ClaimDetails Where ClaimId =?) As A,InsuranceType B) As A
Left Join ClaimDetails B 
On 	A.ClaimId = B.ClaimId And
	A.SequenceNo = B.SequenceNo And
	A.InsuranceTypeId = B.InsuranceTypeId) As A Inner Join Claims B 
ON	A.ClaimId = B.Id) As A Inner Join Insurances B
On 	A.InsuranceId = B.Id) As A Inner Join Customers B
On A.CustomerId = B.Id






";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Param2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InsuranceClaimsDataSet.DataTable1DataTable dataTable, int Param2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param2));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InsuranceClaimsDataSet.DataTable1DataTable GetData(int Param2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Param2));
            InsuranceClaimsDataSet.DataTable1DataTable dataTable = new InsuranceClaimsDataSet.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ClaimInsuranceTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClaimInsuranceTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ClaimInsuranceType";
            tableMapping.ColumnMappings.Add("InsuranceTypeName", "InsuranceTypeName");
            tableMapping.ColumnMappings.Add("ClaimAmount", "ClaimAmount");
            tableMapping.ColumnMappings.Add("ResponsibilityAmount", "ResponsibilityAmount");
            tableMapping.ColumnMappings.Add("QZFAmount", "QZFAmount");
            tableMapping.ColumnMappings.Add("BFZFAmount", "BFZFAmount");
            tableMapping.ColumnMappings.Add("QTKCAmount", "QTKCAmount");
            tableMapping.ColumnMappings.Add("YBZFAmount", "YBZFAmount");
            tableMapping.ColumnMappings.Add("DSFZFAmount", "DSFZFAmount");
            tableMapping.ColumnMappings.Add("MPEAmount", "MPEAmount");
            tableMapping.ColumnMappings.Add("PFRate", "PFRate");
            tableMapping.ColumnMappings.Add("SumAmount", "SumAmount");
            tableMapping.ColumnMappings.Add("SumQZFAmount", "SumQZFAmount");
            tableMapping.ColumnMappings.Add("SumBFZFAmount", "SumBFZFAmount");
            tableMapping.ColumnMappings.Add("SumQTKCAmount", "SumQTKCAmount");
            tableMapping.ColumnMappings.Add("SumYBZFAmount", "SumYBZFAmount");
            tableMapping.ColumnMappings.Add("SumDSFZFAmount", "SumDSFZFAmount");
            tableMapping.ColumnMappings.Add("SumMPEAmount", "SumMPEAmount");
            tableMapping.ColumnMappings.Add("SumClaimAmount", "SumClaimAmount");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::InsuranceClaims.Properties.Settings.Default.InsuranceClaimsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"Select  InsuranceTypeName
,       Sum(ResponsibilityAmount) As SumAmount
,       Sum(QZFAmount) As SumQZFAmount
,       Sum(BFZFAmount) As SumBFZFAmount
,	Sum(QTKCAmount) As SumQTKCAmount
,	Sum(YBZFAmount) As SumYBZFAmount
,	Sum(DSFZFAmount) AS SumDSFZFAmount
,	Sum(MPEAmount) As SumMPEAmount
,	PFRate	
,       Sum(ClaimAmount) AS SumClaimAmount
From	CDS
Where	ClaimId=? And
	ClaimNo = ?
Group by InsuranceTypeName,PFRate
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ClaimId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ClaimId", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ClaimNo", global::System.Data.OleDb.OleDbType.WChar, 20, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ClaimNo", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InsuranceClaimsDataSet.ClaimInsuranceTypeDataTable dataTable, global::System.Nullable<int> ClaimId, string ClaimNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ClaimNo == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ClaimNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InsuranceClaimsDataSet.ClaimInsuranceTypeDataTable GetData(global::System.Nullable<int> ClaimId, string ClaimNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ClaimNo == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ClaimNo));
            }
            InsuranceClaimsDataSet.ClaimInsuranceTypeDataTable dataTable = new InsuranceClaimsDataSet.ClaimInsuranceTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ClaimDetailTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClaimDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ClaimDetail";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("ClaimId", "ClaimId");
            tableMapping.ColumnMappings.Add("SequenceNo", "SequenceNo");
            tableMapping.ColumnMappings.Add("CertType", "CertType");
            tableMapping.ColumnMappings.Add("PersonId", "PersonId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Gender", "Gender");
            tableMapping.ColumnMappings.Add("InsuranceTypeCode", "InsuranceTypeCode");
            tableMapping.ColumnMappings.Add("ClaimTypeId", "ClaimTypeId");
            tableMapping.ColumnMappings.Add("OccurDate", "OccurDate");
            tableMapping.ColumnMappings.Add("AccountName", "AccountName");
            tableMapping.ColumnMappings.Add("Account", "Account");
            tableMapping.ColumnMappings.Add("BankId", "BankId");
            tableMapping.ColumnMappings.Add("InvoiceNo", "InvoiceNo");
            tableMapping.ColumnMappings.Add("InvoiceCount", "InvoiceCount");
            tableMapping.ColumnMappings.Add("HospitalId", "HospitalId");
            tableMapping.ColumnMappings.Add("ResponsibilityAmount", "ResponsibilityAmount");
            tableMapping.ColumnMappings.Add("QZFAmount", "QZFAmount");
            tableMapping.ColumnMappings.Add("BFZFAmount", "BFZFAmount");
            tableMapping.ColumnMappings.Add("QTKCAmount", "QTKCAmount");
            tableMapping.ColumnMappings.Add("YBZFAmount", "YBZFAmount");
            tableMapping.ColumnMappings.Add("DSFZFAmount", "DSFZFAmount");
            tableMapping.ColumnMappings.Add("MPEAmount", "MPEAmount");
            tableMapping.ColumnMappings.Add("PFRate", "PFRate");
            tableMapping.ColumnMappings.Add("ClaimAmount", "ClaimAmount");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("ClaimNo", "ClaimNo");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("HospitalName", "HospitalName");
            tableMapping.ColumnMappings.Add("ClaimDate", "ClaimDate");
            tableMapping.ColumnMappings.Add("InsuranceCode", "InsuranceCode");
            tableMapping.ColumnMappings.Add("CustomerId", "CustomerId");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("InsuranceTypeName", "InsuranceTypeName");
            tableMapping.ColumnMappings.Add("ClaimTypeName", "ClaimTypeName");
            tableMapping.ColumnMappings.Add("CertTypeName", "CertTypeName");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Department", "Department");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::InsuranceClaims.Properties.Settings.Default.InsuranceClaimsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "Select\t* from CDS \r\nWhere\tClaimId=? And\r\n\tClaimNo = ?";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ClaimId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ClaimId", global::System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ClaimNo", global::System.Data.OleDb.OleDbType.WChar, 20, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ClaimNo", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InsuranceClaimsDataSet.ClaimDetailDataTable dataTable, global::System.Nullable<int> ClaimId, string ClaimNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ClaimNo == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ClaimNo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InsuranceClaimsDataSet.ClaimDetailDataTable GetData(global::System.Nullable<int> ClaimId, string ClaimNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ClaimNo == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ClaimNo));
            }
            InsuranceClaimsDataSet.ClaimDetailDataTable dataTable = new InsuranceClaimsDataSet.ClaimDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ClaimPersonTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClaimPersonTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ClaimPerson";
            tableMapping.ColumnMappings.Add("PersonId", "PersonId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Company", "Company");
            tableMapping.ColumnMappings.Add("Department", "Department");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("ClaimId", "ClaimId");
            tableMapping.ColumnMappings.Add("CustomerName", "CustomerName");
            tableMapping.ColumnMappings.Add("InsuranceCode", "InsuranceCode");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("ClaimDate", "ClaimDate");
            tableMapping.ColumnMappings.Add("ClaimNo", "ClaimNo");
            tableMapping.ColumnMappings.Add("CertTypeName", "CertTypeName");
            tableMapping.ColumnMappings.Add("AccountName", "AccountName");
            tableMapping.ColumnMappings.Add("Account", "Account");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::InsuranceClaims.Properties.Settings.Default.InsuranceClaimsConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "Select\tDistinct CertTypeName,PersonId,Name,Company,Department,Code,ClaimId,Custom" +
                "erName,InsuranceCode,BankName,AccountName,Account,ClaimDate,ClaimNo\r\nFrom\tCDS\r\nW" +
                "here\tClaimId=?";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ClaimId", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ClaimId", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InsuranceClaimsDataSet.ClaimPersonDataTable dataTable, global::System.Nullable<int> ClaimId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InsuranceClaimsDataSet.ClaimPersonDataTable GetData(global::System.Nullable<int> ClaimId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ClaimId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ClaimId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            InsuranceClaimsDataSet.ClaimPersonDataTable dataTable = new InsuranceClaimsDataSet.ClaimPersonDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(InsuranceClaimsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(InsuranceClaimsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(InsuranceClaimsDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(InsuranceClaimsDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591